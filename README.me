# Password Brute Force and Common Guessing Tool
Disclaimer
This tool is intended for educational purposes only.

The purpose of this project is to demonstrate the concepts of password security, brute-forcing techniques, and the importance of using strong, secure passwords. By using this tool, you agree to the following:

Authorized Use Only:
This tool should only be used on systems, accounts, or passwords that you own or have explicit permission to test. Unauthorized access or attempts to compromise systems or accounts that you do not own is illegal and unethical.

Compliance with Laws:
Ensure that your use of this tool complies with all applicable laws and regulations in your jurisdiction. Unauthorized password cracking is a violation of privacy and cybersecurity laws.

Responsibility:
The developer(s) of this tool are not responsible for any misuse, damage, or legal consequences that result from improper use of this tool.

Educational Use Only:
The tool is designed to help users understand the vulnerabilities of weak passwords and encourage the adoption of stronger security practices. It should not be used for malicious or unauthorized purposes under any circumstances.

By proceeding, you acknowledge that you have read, understood, and agreed to this disclaimer.
This Python program is designed to test password strength by attempting to brute force a password and check if it matches any commonly used passwords. The tool can be useful for educational purposes, security awareness, or testing the robustness of passwords in a controlled environment.

## Features
- **Common Password Check**: Compares the given password against a list of 10,000 of the most common passwords stored in `words.txt`.
- **Brute Force Attack**: Attempts to guess the password using all possible combinations of:
  - Lowercase letters
  - Optional digits
  - Optional symbols
- **Dynamic Length Adjustment**: Supports brute-forcing passwords of lengths between 3 and 5 characters.

## How It Works
1. The program first checks if the password matches any common password in `words.txt`.
2. If no match is found, it proceeds to brute-force the password by:
   - Generating all possible combinations of characters for specified lengths.
   - Comparing each generated guess against the target password.

## Requirements
- Python 3.7 or later

## Installation
1. Clone or download this repository to your local machine.
2. Ensure Python is installed on your system.
3. Place the list of common passwords in a file named `words.txt` in the same directory as the script. The `words.txt` file should contain 10,000 of the most common passwords, one per line.

## Usage
1. Open the script and set the `password` variable in the `main()` function to the password you want to test:
   ```python
   password: str = 'Password1' # Add password here to brute force
Run the script:

bash
Copy code
python main.py
View the results:

If the password matches a common password, it will display the match.
If not, it will attempt brute-force guessing and display the result.
Example Output
Common Password Match:
python
Copy code
Searching...
Common match: password123 (#12)
0.03 s
Brute Force Match:
arduino
Copy code
Searching...
"abc1" was cracked in 1,234 guesses
5.67 s
No Match Found:
lua
Copy code
Searching...
There was no match...
6.45 s
File Structure
main.py: The Python script containing the program logic.
words.txt: A text file containing 10,000 of the most common passwords, one per line.
Customization
Password Length: Adjust the range in the main() function:
python
Copy code
for i in range(3, 6):  # Modify the range as needed
Character Set: Enable or disable digits and symbols in the brute_force function:
python
Copy code
brute_force(password, length=i, digits=True, symbols=False)
Disclaimer
This program is for educational purposes only. Do not use it to access unauthorized accounts or systems. Always ensure you have permission to test passwords or security systems.

License
This project is open-source and available under the MIT License.

Author
Developed by [Your Name]. Feel free to reach out with questions or suggestions!

yaml
Copy code

---

### Key Updates:
1. **Mentioned `words.txt` Details**:
   - Explicitly stated that `words.txt` contains 10,000 of the most common passwords.
2. **File Structure Section**:
   - Clarified that `words.txt` is a required file in the same directory as the script.

Let me know if you need further refinements! ðŸ˜Š